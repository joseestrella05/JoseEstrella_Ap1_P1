@page "/Cobros/Create"
@rendermode InteractiveServer
@inject CobroServices cobroService
@inject DeudorServices deudoresService
@inject PrestamoService prestamosService
@inject NavigationManager navigationManager

<PageTitle>Create</PageTitle>
<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Cobro</h5>
            </div>

            <div class="card-body">
                @* CobroId *@
                <div class="mb-3">
                    <label class="form-label"><strong>CobroId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Cobro.CobroId" ></InputNumber>
                </div>

                @* Fecha *@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Cobro.Fecha"></InputDate>
                </div>

                @* Deudor *@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>

                    <div class="input-group">

                        <InputSelect class="form-control form-select" @bind-Value="Cobro.DeudorId">
                            <option value="0" selected disabled>Elija una opción</option>
                            @foreach (var deudor in ListaDeudores)
                            {
                                <option value="@deudor.DeudoresId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-outline-success bi bi-arrow-clockwise"
                                @onclick="BuscarPrestamosPendientes">
                            Buscar
                        </button>

                    </div>

                    <ValidationMessage For="(() => Cobro.DeudorId)" />
                </div>

                @* Detalles del Cobro *@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles del Cobro</h5>

                    <PrestamoPicker Prestamos="ListaPrestamos"
                                    PrestamoId="DetalleSeleccionado.PrestamoId"
                                    Valor="DetalleSeleccionado.ValorCobrado"
                                    OnPrestamoSelected="HandlePrestamoSelected" />
                    <hr />
                    <table class="table table-light">
                        <thead class="table table-striped">
                            <tr class="Text-center">
                                <th>Pr&eacute;stamo</th>
                                <th>Cobrado</th>
                                <th>Remover</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Cobro.CobrosDetalles)
                            {
                            <th>@detalle.PrestamoId</th>
                            <th>@detalle.ValorCobrado</th>
                            <th>
                                <button type="button" class="btn btn-outline-danger bi bi-trash"
                                        @onclick="() => RemoverDetalle(detalle)"></button>
                            </th>
                            }
                        </tbody>
                    </table>
                    <hr />
                </div>
                @* Monto *@
                <div class="row">
                    <div class="col-6 offset-6">
                        <div class="mb-3">
                            <label class="form-label"><strong>Monto</strong></label>
                            <label class="form-control text-end"><strong>@Cobro.Monto</strong></label>

                            <ValidationMessage For="(() => Cobro.Monto)" />
                        </div>
                    </div>
                </div>
            </div>

            @* footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Cobro/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    public Cobros Cobro { get; set; } = new Cobros();
    public CobrosDetalles DetalleSeleccionado { get; set; } = new();
    public List<Deudores> ListaDeudores { get; set; } = [];
    public List<Prestamos> ListaPrestamos { get; set; } = [];
    List<ToastMessage> MensajeToast = new List<ToastMessage>();

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
        => new ToastMessage
            {
                Type = toastType,
                Title = "Notificación",
                HelpText = $"{DateTime.Now}",
                Message = mensaje,
            };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }


    protected override async Task OnInitializedAsync()
    {
        ListaDeudores = await deudoresService
            .Listar(d => true);
    }
    public async Task BuscarPrestamosPendientes()
    {
        ListaPrestamos = await prestamosService
            .GetPrestamosPendientes(Cobro.DeudorId);
    }

    private async Task HandlePrestamoSelected((Prestamos prestamo, double valor) selection)
    {
        var detalle = new CobrosDetalles
            {
                PrestamoId = selection.prestamo.PrestamoId,
                ValorCobrado = selection.valor
            };

        Cobro.CobrosDetalles.Add(detalle);
        Cobro.Monto = Cobro.CobrosDetalles.Sum(d => d.ValorCobrado);

        DetalleSeleccionado = new CobrosDetalles();
        await Task.CompletedTask;
    }

    public async Task Guardar()
    {
        try
        {
            var paso = await cobroService.Guardar(Cobro);

            if (paso)
            {
                Mensaje(ToastType.Success, "Se creó correctamente");
                navigationManager.NavigateTo("/Cobro/Index");
            }
            else
            {
                Mensaje(ToastType.Danger, "No se ha creado correctamente");
            }
        }
        catch (Exception ex)
        {
            Mensaje(ToastType.Danger, $"Error al guardar: {ex.Message}");
        }
    }


    public void RemoverDetalle(CobrosDetalles detalle)
    {
        Cobro.CobrosDetalles.Remove(detalle);
        DetalleSeleccionado = detalle;
    }
}
