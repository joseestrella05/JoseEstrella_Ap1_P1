@page "/Cobro/Create"
@rendermode InteractiveServer
@inject DeudorServices DeudorService
@inject PrestamoService PrestamosService
@inject CobroServices CobroServices
@inject NavigationManager Navigation

<EditForm Model="Cobro" OnValidSubmit="Crear">
	<DataAnnotationsValidator />
	<Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h2 class="card-title">Registro cobros</h2>
			</div>
			<div class="card-body">
				<label class="form-label ">Seleccionar Deudor </label>
				<div class="input-group">
					<InputSelect class="form-select " @bind-Value="Cobro.DeudorId" >
						<option value="0">Seleccione una opcion</option>
						@foreach (var deudor in ListDeudores)
						{
							<option value="@deudor.DeudoresId">@deudor.Nombres</option>
						}
					</InputSelect>
					<button type="button" @onclick="Buscar" class="btn btn-outline-primary bi bi-search"></button>
				</div>
				<ValidationMessage For="@(() => Cobro.DeudorId)" />


				<div>
					<label class="form-label">Fecha</label>
					<InputDate class="form-control" @bind-Value="Cobro.Fecha" readonly></InputDate>
					<ValidationMessage For="@(() => Cobro.Fecha)" />
				</div>

				<div class="col md-8">
					<label class="form-label">Prestamos</label>
					<InputSelect class="form-select " @bind-Value="NuevoDetalle.PrestamoId">
						<option value="0">Seleccione una opcion</option>
						@foreach (var Prestamos in ListPrestamos)
						{
							<option value="@Prestamos.PrestamoId">@Prestamos.Concepto</option>
						}
					</InputSelect>
					<ValidationMessage For="@(() => NuevoDetalle.PrestamoId)" />
				</div>

				<div>
					<label class="form-label">Balance</label>
					<InputNumber class="form-control" @bind-Value="Cobro.Monto" readonly></InputNumber>
					<ValidationMessage For="@(() => Prestamo.Monto)" />
				</div>

				<div class="border border-success p-3 mt-3">
					<h4>Registro Destalles</h4>
					<div class="row">
						<div class="col-4">
							<label class="form-label"><strong>Deudor</strong></label>
							<InputText class="form-control" @bind-Value="Nombre" readonly></InputText>
						</div>

						<div class="col-4">
							<label class="form-label"><strong>Valor Cobrado</strong></label>
							<InputNumber class="form-control" @bind-Value="NuevoDetalle.ValorCobrado" ></InputNumber>
							<ValidationMessage For="@(() => NuevoDetalle.ValorCobrado)" />
						</div>

						<div class ="col-4">
							<button type="button" class="btn btn-success " @onclick="Agregar">Agregar </button>
						</div>
					</div>


					<div>
						<table class="table table-light">
							<thead class="table table-striped">
								<tr class="Text-center">
									<th>Nombre</th>
									<th>Id prestamo</th>
									<th>Valor cobrado</th>
									<th>Remover</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var Detalle in ListDetalles)
								{
									<tr class="Text-center">
										<th>@Nombre</th>
										<th>@Detalle.PrestamoId</th>
										<th>@Detalle.ValorCobrado</th>
										<th>
											<button type="button" @onclick=" ()=> Eliminar(Detalle)" class="btn btn-outline-danger bi bi-trash"> Remover</button>
										</th>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		<div class="card-footer text-center">
			<button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
			<button type="submit" class="btn btn-outline-success bi bi-floppy ml-2">Guardar</button>
		</div>
	</div>

</EditForm>

@code {
	public Cobros? Cobro { get; set; } = new Cobros();
	public Prestamos? Prestamo { get; set; } = new Prestamos();
	public List<Deudores> ListDeudores { get; set; } = new List<Deudores>();
	public CobrosDetalles NuevoDetalle { get; set; } = new CobrosDetalles();
	public List<CobrosDetalles> ListDetalles { get; set; } = new List<CobrosDetalles>();
	public List<Prestamos> ListPrestamos { get; set; } = new List<Prestamos>();
	public string? Nombre { get; set; }
	List<ToastMessage> MensajeToast = new List<ToastMessage>();
	private bool Existe = false;

	private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
		=> new ToastMessage
			{
				Type = toastType,
				Title = "Notificación",
				HelpText = $"{DateTime.Now}",
				Message = mensaje,
			};

	private void Mensaje(ToastType toastType, string mensaje)
	{
		MensajeToast.Add(CreateToastMessage(toastType, mensaje));
	}



	protected override async Task OnInitializedAsync()
	{
		ListDeudores = await DeudorService.Listar(d => true);
	}

	public void Nuevo()
	{
		NuevoDetalle = new CobrosDetalles();
		Existe = false;
	}



	public async Task Agregar()
	{
		if (Cobro.DeudorId <= 0)
		{
			Mensaje(ToastType.Danger, $"Debe selecionar un deudor ");
			return;
		}
		else if (NuevoDetalle.PrestamoId <= 0)
		{
			Mensaje(ToastType.Danger, $"Debe selecionar un prestamo ");
			
			return;
		}
		else if (NuevoDetalle.ValorCobrado <= 0 || NuevoDetalle.ValorCobrado == null)
		{
			Mensaje(ToastType.Danger, "Debe Agregar un valor");
			return;
		}

		NuevoDetalle.CobroId = Cobro.CobroId;
		ListDetalles.Add(NuevoDetalle);
		NuevoDetalle = new CobrosDetalles();
		Mensaje(ToastType.Success, "Se agrego el nuevo detalle Correctamente");
	}

	public async Task Buscar()
	{

		if (Cobro.DeudorId <= 0)
		{
			Mensaje(ToastType.Danger, "Debe selecionar un Deudor");
			return;
		}
		else
		{
			ListPrestamos = await PrestamosService.Listar(p => p.DeudorId == Cobro.DeudorId);
			if (ListPrestamos == null || !ListPrestamos.Any())
			{
				Mensaje(ToastType.Danger, "Este deudor no tiene préstamos disponibles");
				return;
			}
			Prestamo = await PrestamosService.GetCliente(Cobro.DeudorId);
			Nombre = Prestamo?.Deudor.Nombres;
			Cobro.Monto = Prestamo.Monto;

		}
	}

	public async Task Eliminar(CobrosDetalles detalle)
	{
		ListDetalles.Remove(detalle);
		NuevoDetalle.ValorCobrado = detalle.ValorCobrado;
		NuevoDetalle.PrestamoId = detalle.PrestamoId;
	}

	public async Task Crear()
	{
		foreach (var detalle in ListDetalles)
		{
			Cobro.CobrosDetalles.Add(detalle);
		}
		await CobroServices.Guardar(Cobro);
		Navigation.NavigateTo("/Cobro/Index");
	}

}