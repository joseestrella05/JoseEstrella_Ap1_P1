@page "/Prestamo/Create"
@rendermode InteractiveServer
@inject PrestamoService Servicio
@inject DeudorServices DeudorService
@inject NavigationManager navigation

<EditForm Model="pretamos" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="Contenedor_Secundario">
            <div class="card-header bg-primary text-white text-center">
                <h2><strong>Crear Prestamo</strong></h2>
            </div>
            <div class="card-body">
                <label class="form-label" for="Id"><strong>Id</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="@pretamos.PrestamoId" readonly />

                <label class="form-label">Deudor</label>
                <InputSelect @bind-Value="pretamos.DeudorId" class="form-control">
                    <option value="0">Selecciona el deudor</option>
                    @foreach (var deudor in Deudores)
                    {
                        <option value="@deudor.DeudoresId">@deudor.Nombres</option>
                    }
                </InputSelect>

                <label class="form-label" for="Concepto"><strong>Concepto</strong></label>
                <InputText id="Concepto" class="form-control" @bind-Value="@pretamos.Concepto" />
                <ValidationMessage For="@(() => pretamos.Concepto)" />

                <label class="form-label" for="Monto"><strong>Monto</strong></label>
                <InputNumber id="Monto" class="form-control" @bind-Value="@pretamos.Monto" />
                <ValidationMessage For="@(() => pretamos.Monto)" />

                <div>
                    <div class="card-footer">
                        <a type="button" href="/Pretamos/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Volver </a>
                        <button type="submit" class="btn btn-success bi bi-floppy-fill">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Prestamos pretamos { get; set; } = new Prestamos();
    public List<Prestamos> ListaPretamo { get; set; } = new List<Prestamos>();
    public List<Deudores> Deudores { get; set; } = new List<Deudores>();
    List<ToastMessage> MensajeToast = new List<ToastMessage>();

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
        => new ToastMessage
            {
                Type = toastType,
                Title = "Notificación",
                HelpText = $"{DateTime.Now}",
                Message = mensaje,
            };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaPretamo = await Servicio.Listar(t => true);
            Deudores = await DeudorService.Listar(t => true);
        }
        catch (Exception ex)
        {
            Mensaje(ToastType.Danger, $"Error al cargar datos: {ex.Message}");
        }
    }

    public async Task Crear()
    {
        try
        {
            var Guardar = await Servicio.Guardar(pretamos);
            Mensaje(ToastType.Success, "Prestamo guardado correctamente.");
            navigation.NavigateTo("/Pretamos/Index");
        }
        catch (Exception ex)
        {
            Mensaje(ToastType.Danger, $"Error al guardar el préstamo: {ex.Message}");
        }
    }
}
